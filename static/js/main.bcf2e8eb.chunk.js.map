{"version":3,"sources":["components/timer.js","components/socialMediaButtons.js","App.js","serviceWorker.js","index.js","graphics/logo.png","graphics/logo_1.png"],"names":["Timer","style","color","fontSize","className","Component","SocialMediaButtons","props","position","right","margin","TwitterShareButton","url","title","text","marginRight","TwitterIcon","size","left","round","FacebookShareButton","FacebookIcon","EmailShareButton","EmailIcon","App","src","logo","symbol","classname","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"ySAEqBA,E,uKAGb,OACI,6BACI,wBAAIC,MAAO,CAACC,MAAM,UAAWC,SAAS,KAAtC,qBACA,yBAAKF,MAAO,CAACC,MAAM,UAAWC,SAAS,MACnC,0BAAMC,UAAU,aAAhB,YAEJ,kC,GATmBC,a,gDCsCpBC,EAnCY,SAACC,GAAD,OACvB,yBAAKH,UAAU,qBACVH,MAAO,CACHO,SAAU,WACVC,MAAO,GACPC,OAAQ,OAEb,kBAACC,EAAA,EAAD,CACIC,IAAKL,EAAMK,IACXC,MAAON,EAAMO,KACbb,MAAO,CAACc,YAAa,KACrB,kBAACC,EAAA,EAAD,CACIC,KAAM,GACNC,KAAM,GACNC,OAAK,KAEb,kBAACC,EAAA,EAAD,CACIR,IAAKL,EAAMK,IACXC,MAAON,EAAMO,KACbb,MAAO,CAACc,YAAa,KACrB,kBAACM,EAAA,EAAD,CACIJ,KAAM,GACNE,OAAK,KAEb,kBAACG,EAAA,EAAD,CACIV,IAAKL,EAAMK,IACXC,MAAON,EAAMO,KACbb,MAAO,CAACc,YAAa,KACrB,kBAACQ,EAAA,EAAD,CACIN,KAAM,GACNE,OAAK,OCKNK,MA9Bf,WACI,OACI,yBAAKpB,UAAU,OACX,yBAAKA,UAAU,cACX,yBAAKqB,IAAKC,IAAMtB,UAAU,aAC1B,yBAAKqB,IAAKE,IAAQvB,UAAU,eAC5B,uBAAGA,UAAU,cAAb,+BACA,kBAAC,EAAD,CAAoBQ,IAAI,iBAAiBE,KAAK,gCAElD,0BAAMV,UAAU,YAChB,kBAAC,EAAD,CAAOwB,UAAU,cAEjB,yBAAKxB,UAAU,gBACX,4BAAQA,UAAU,kBACd,uBAAGA,UAAU,WAAWyB,KAAK,0BAA7B,mBAIJ,4BAAQzB,UAAU,eACd,uBAAGA,UAAU,WAAWyB,KAAK,8BAA7B,6BCjBAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5BC,EAAOC,QAAU,IAA0B,kC,kBCA3CD,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.bcf2e8eb.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Timer extends Component {\n    // should connect to the chrome extension timer somehow\n    render() {\n        return (\n            <div>\n                <h1 style={{color:'#3241e4', fontSize:40}}>Time for a break!</h1>\n                <div style={{color:'#F05E50', fontSize:160}}>\n                    <time className=\"Timer-num\">0:30:59</time>\n                </div>\n                <br />\n            </div>\n        );\n    }\n}\n","import React from 'react'\nimport {EmailShareButton, FacebookShareButton, TwitterShareButton} from \"react-share\";\nimport {FacebookIcon, TwitterIcon, EmailIcon} from \"react-share\";\n\n// takes in a url and message from App to share on the social media platform\nconst SocialMediaButtons = (props) => (\n    <div className=\"SocialMediaButtons\"\n         style={{\n             position: 'absolute',\n             right: 10,\n             margin: '1%'\n         }}>\n        <TwitterShareButton\n            url={props.url}\n            title={props.text}\n            style={{marginRight: 10}}>\n            <TwitterIcon\n                size={32}\n                left={10}\n                round/>\n        </TwitterShareButton>\n        <FacebookShareButton\n            url={props.url}\n            title={props.text}\n            style={{marginRight: 10}}>\n            <FacebookIcon\n                size={32}\n                round/>\n        </FacebookShareButton>\n        <EmailShareButton\n            url={props.url}\n            title={props.text}\n            style={{marginRight: 10}}>\n            <EmailIcon\n                size={32}\n                round/>\n        </EmailShareButton>\n    </div>\n)\n\nexport default SocialMediaButtons\n","import React, {Component} from 'react';\nimport { Redirect } from \"react-router-dom\";\nimport logo from './graphics/logo.png';\nimport symbol from './graphics/logo_1.png';\nimport './App.css';\nimport Timer from './components/timer.js'\nimport SocialMediaButtons from \"./components/socialMediaButtons\";\n\n\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <div className=\"App-header\">\n                <img src={logo} className=\"App-logo\"/>\n                <img src={symbol} className=\"App-symbol\"/>\n                <p className=\"App-slogan\">Empower You to Feel Awesome</p>\n                <SocialMediaButtons url=\"www.google.com\" text=\"Check out what I just did!\"/>\n            </div>\n            <body className=\"App-body\">\n            <Timer classname=\"App-timer\"></Timer>\n\n            <div className=\"Button-group\">\n                <button className=\"Workout-button\" >\n                    <a className=\"App-link\" href=\"https://chloeting.com/\">\n                        Try a Workout!\n                    </a>\n                </button>\n                <button className=\"Yoga-button\" >\n                    <a className=\"App-link\" href=\"https://www.headspace.com/\">\n                        Try some Meditation!\n                    </a>\n                </button>\n            </div>\n            </body>\n        </div>\n    );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.47617ba5.png\";","module.exports = __webpack_public_path__ + \"static/media/logo_1.f112164f.png\";"],"sourceRoot":""}