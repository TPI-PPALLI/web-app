{"version":3,"sources":["graphics/logo.png","graphics/logo_1.png","components/timer.js","components/socialMediaButtons.js","components/Home.js","components/Instructions.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Timer","style","color","fontSize","id","Component","SocialMediaButtons","props","className","position","right","margin","TwitterShareButton","url","title","text","marginRight","TwitterIcon","size","left","round","FacebookShareButton","FacebookIcon","EmailShareButton","EmailIcon","Home","src","logo","alt","symbol","classname","href","to","Instructions","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mPCEtBC,E,uKAGb,OACI,6BACI,wBAAIC,MAAO,CAACC,MAAM,UAAWC,SAAS,KAAtC,qBACA,yBAAKF,MAAO,CAACC,MAAM,UAAWC,SAAS,MACnC,0BAAMC,GAAG,aAAT,YAEJ,kC,GATmBC,a,gDCsCpBC,EAnCY,SAACC,GAAD,OACvB,yBAAKC,UAAU,qBACVP,MAAO,CACHQ,SAAU,WACVC,MAAO,GACPC,OAAQ,OAEb,kBAACC,EAAA,EAAD,CACIC,IAAKN,EAAMM,IACXC,MAAOP,EAAMQ,KACbd,MAAO,CAACe,YAAa,KACrB,kBAACC,EAAA,EAAD,CACIC,KAAM,GACNC,KAAM,GACNC,OAAK,KAEb,kBAACC,EAAA,EAAD,CACIR,IAAKN,EAAMM,IACXC,MAAOP,EAAMQ,KACbd,MAAO,CAACe,YAAa,KACrB,kBAACM,EAAA,EAAD,CACIJ,KAAM,GACNE,OAAK,KAEb,kBAACG,EAAA,EAAD,CACIV,IAAKN,EAAMM,IACXC,MAAOP,EAAMQ,KACbd,MAAO,CAACe,YAAa,KACrB,kBAACQ,EAAA,EAAD,CACIN,KAAM,GACNE,OAAK,OCWNK,EAvCF,WACX,OACE,yBAAKjB,UAAU,OACb,yBAAKA,UAAU,cACb,yBAAKkB,IAAKC,IAAMnB,UAAU,WAAWoB,IAAI,SACzC,yBAAKF,IAAKG,IAAQrB,UAAU,aAAaoB,IAAI,WAC7C,uBAAGpB,UAAU,cAAb,+BACA,kBAAC,EAAD,CACEK,IAAI,iBACJE,KAAK,gCAGT,0BAAMP,UAAU,YACd,kBAAC,EAAD,CAAOsB,UAAU,cAEjB,yBAAKtB,UAAU,gBACb,4BAAQA,UAAU,kBAChB,uBAAGA,UAAU,WAAWuB,KAAK,0BAA7B,mBAIF,4BAAQvB,UAAU,eAChB,uBAAGA,UAAU,WAAWuB,KAAK,8BAA7B,0BAKJ,yBAAKvB,UAAU,gBACb,kBAAC,IAAD,CAAMwB,GAAG,iBACT,4BAAQxB,UAAU,gBAAlB,qBCfKyB,EAhBM,WACnB,OACE,yBAAKzB,UAAU,OACb,yBAAKA,UAAU,cACb,yBAAKkB,IAAKC,IAAMnB,UAAU,WAAWoB,IAAI,SACzC,yBAAKF,IAAKG,IAAQrB,UAAU,aAAaoB,IAAI,WAC7C,uBAAGpB,UAAU,cAAb,+BACA,kBAAC,EAAD,CACEK,IAAI,iBACJE,KAAK,kC,MCGAmB,MAXf,WACI,OACI,yBAAK1B,UAAU,OACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO2B,OAAK,EAACC,KAAK,IAAIC,UAAWZ,IACjC,kBAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,gBAAgBC,UAAWJ,OCCzCK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.caff491f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.47617ba5.png\";","module.exports = __webpack_public_path__ + \"static/media/logo_1.f112164f.png\";","import React, { Component } from 'react'\r\n\r\nexport default class Timer extends Component {\r\n    // should connect to the chrome extension timer somehow\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 style={{color:'#3241e4', fontSize:40}}>Time for a break!</h1>\r\n                <div style={{color:'#F05E50', fontSize:160}}>\r\n                    <time id=\"Timer-num\">0:30:59</time>\r\n                </div>\r\n                <br />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react'\r\nimport {EmailShareButton, FacebookShareButton, TwitterShareButton} from \"react-share\";\r\nimport {FacebookIcon, TwitterIcon, EmailIcon} from \"react-share\";\r\n\r\n// takes in a url and message from App to share on the social media platform\r\nconst SocialMediaButtons = (props) => (\r\n    <div className=\"SocialMediaButtons\"\r\n         style={{\r\n             position: 'absolute',\r\n             right: 10,\r\n             margin: '1%'\r\n         }}>\r\n        <TwitterShareButton\r\n            url={props.url}\r\n            title={props.text}\r\n            style={{marginRight: 10}}>\r\n            <TwitterIcon\r\n                size={32}\r\n                left={10}\r\n                round/>\r\n        </TwitterShareButton>\r\n        <FacebookShareButton\r\n            url={props.url}\r\n            title={props.text}\r\n            style={{marginRight: 10}}>\r\n            <FacebookIcon\r\n                size={32}\r\n                round/>\r\n        </FacebookShareButton>\r\n        <EmailShareButton\r\n            url={props.url}\r\n            title={props.text}\r\n            style={{marginRight: 10}}>\r\n            <EmailIcon\r\n                size={32}\r\n                round/>\r\n        </EmailShareButton>\r\n    </div>\r\n)\r\n\r\nexport default SocialMediaButtons;\r\n","import React from \"react\";\r\nimport logo from \"../graphics/logo.png\";\r\nimport symbol from \"../graphics/logo_1.png\";\r\nimport Timer from \"./timer.js\";\r\nimport SocialMediaButtons from \"./socialMediaButtons\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <img src={symbol} className=\"App-symbol\" alt=\"symbol\" />\r\n        <p className=\"App-slogan\">Empower You to Feel Awesome</p>\r\n        <SocialMediaButtons\r\n          url=\"www.google.com\"\r\n          text=\"Check out what I just did!\"\r\n        />\r\n      </div>\r\n      <body className=\"App-body\">\r\n        <Timer classname=\"App-timer\"></Timer>\r\n\r\n        <div className=\"Button-group\">\r\n          <button className=\"Workout-button\">\r\n            <a className=\"App-link\" href=\"https://chloeting.com/\">\r\n              Try a Workout!\r\n            </a>\r\n          </button>\r\n          <button className=\"Yoga-button\">\r\n            <a className=\"App-link\" href=\"https://www.headspace.com/\">\r\n              Try some Meditation!\r\n            </a>\r\n          </button>\r\n        </div>\r\n        <div className=\"Button-group\">\r\n          <Link to=\"/instructions\">\r\n          <button className=\"Instructions\">\r\n              Instructions\r\n          </button>\r\n          </Link>\r\n        </div>\r\n      </body>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport logo from \"../graphics/logo.png\";\r\nimport symbol from \"../graphics/logo_1.png\";\r\nimport SocialMediaButtons from \"./socialMediaButtons\";\r\n\r\nconst Instructions = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <img src={symbol} className=\"App-symbol\" alt=\"symbol\" />\r\n        <p className=\"App-slogan\">Empower You to Feel Awesome</p>\r\n        <SocialMediaButtons\r\n          url=\"www.google.com\"\r\n          text=\"Check out what I just did!\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Instructions;","import React from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport Home from \"./components/Home\";\r\nimport Instructions from \"./components/Instructions\";\r\nimport './App.css';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Router>\r\n                <Route exact path='/' component={Home} />\r\n                <Route exact path='/instructions' component={Instructions} />\r\n            </Router>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}